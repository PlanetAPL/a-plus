

				tim
				===
		

0.  Description.

	The tim gadget is an interface to the A+ function/dependency 
	timer.

1.  Operation.
	
	Get everything loaded you want to time.

	$load tim.
	show tim.define `foo

	Selecting a row in the "Contexts" list causes the functions
	in that context to be displayed in the "Functions" list.

	Referring to a row in the "Contexts" list toggles all/none
	indexing of the functions in that context.

	Referring to a row in the "Functions" list toggles yes/no
	indexing of that function.

	Pressing "All" references all functions in all contexts.

	Pressing "Start" sets timing on all currently indexed functions,
	and runs the timer.  (display time{} Ý time `f ... `g)

	Pressing "Stop" removes the currently indexed functions from
	the timer, and resets the report.  (display time{} Ý time ())

	Pressing "Report" re-runs the timer on the currently indexed
	functions.  (display time{})

	Pressing "Clear" de-indexes all currently indexed functions.

	Pressing "Refresh" retrieves current contexts and clears.

	Entering an expression into the "â" line causes that expression
	to be evaluated (under "do"), and the timer to be run on the
	currently indexed functions.

	Selecting a column-label of the timing matrix causes the matrix
	to be down-sorted on that column (heaviest loads to the top.)

	Selecting the corner-label of the timing matrix causes the matrix
	to be up-sorted on the function names.

	The last column, labelled "%Total", shows percent of total for
	the sorted column.  (Thanks to Tuck Lee for suggesting this.)

	Picking "Chart" from the "Raise" choice-box raises the timing 
	chart.
	
	Picking "Functions", "Dependencies", or "All" from the "Types"
	choice-box, filters on those categories.

	Picking "Context" from the "Types" choice-box, filters on all
	types, and summarizes by context.

	The top "N" functions are charted.

	E.g., 
		Index some functions to time.
		Press "Start" to initialize the timer and run report.
		Go to "â" input line and type "show É10".
		Updated report displayed.

		Go to emacs and type show É10.
		Report does not update.
		Press "Report" to see additional time spent.

		Press "Start" to reset the report.

		Press "Clear" to de-index timed functions.

	The _EXP input scalar accepts a "manual" form for adding and
	removing functions from the timing list:

		:a.foo, a.goo, b.hoo

	adds a.foo, a.goo, and b.hoo to the timing list if they are
	not in the list, and removes them if they are.  (Note initial
	"escape character" colon).

	NB:  "Total CPU" denotes "User" + "System" times.

2.  zûdefine cx

	cx = target context of timer tool
	z = `cx._TIM

	Define a tim-gadget in the specified context.

3.  Variables

	_TIMEDû		symbolic vector of functions to be timed
	_CXû		selected context
	_SORTû		Å ¢1 (è by name), 0 1 2 3 4

	_LABELSû	row labels of _REPORT

	_FILEû		"/tmp/tim.txt"
	
	_ACTIONû	tim actions
	_RAISEû		raise report or chart
	_TYPESû		type of object to time
	_CONTROLSû	layout of _ACTION and _RAISE

	_CXSû		` _nl `cxs at define-time
	_FNSû		`_CX _nl `fns

	_OBJECTSû	hpane of _CXS and _FNS
	_REPORTû	timing matrix

	_REPORT_CHART:	chart of percentages of time
	_DISPLAYSû	layout of _REPORT and _REPORT_CHART

	_BODYû		vpane of _OBJECTS and _DISPLAYS

	_EXPû		executable expression input scalar
	_Nû		functions to be charted
	_INPUTSû	layout of `_EXP and `_N

	_TIMû		outer layout

4.  Restrictions

	tim controls:	assignment callbacks on _ACTION, _RAISE and _EXP;
			refer callbacks on _CXS and _FNS
			select callback on _CXS
			selectcol callback on _REPORT
			assignment callback on _SORT
			contents of _LABELS

5.  Example

		$load s
		$load tim

		show tim.define `f

	Double click on the context "tim" to index all tim functions.
	Press "Report" repeatedly, to time tim functions.
	Select "Calls" label on timing matrix to downsort on calls.




