

				fkt
				===
		

0.  Description.

	The fkt gadget is a `choice widget which implements "family/kind"
	selection.

1.  Operation.

	Typically:

		bûfkt.define `f

	Now define:

		f._FAMILIESûsymbolic vector of application-defined "families"
		f._KINDSûsymbolic vector of application-defined "kinds"
		f._KIND_BY_FAMILYû_KINDS«_FAMILIES symbolic array of values
		f._FAMILYûselected family, Å _FAMILIES

	This has the effect of creating, in context f, a series of variables:

		f._KINDS[0]
		f._KINDS[1]
		:
		f._KINDS[¢1+#_KINDS]
		
	whose values are those in _KIND_BY_FAMILY[;_FAMILIESÉ_FAMILY].

	In the example below, e.g. f.one is electrically connected to the
	background attribute of a screen object.  When a particular family
	is selected, f.one is reassigned, and the visible background of
	the object is updated.

	Finally:

		show b

	This allows selected family (i.e., f._FAMILY) to be specified
	interactively.

	Secondarily, the objects _KINDS, _FAMILIES, and _KIND_BY_FAMILY
	can be used to edit the values of the "kind" variables, or to
	edit the "space" of kinds and families, although no editor for
	this purpose is provided in fkt.  (fkt.define{} does, however,
	bind these objects.)

2.  zûdefine cx

	cx = target context of color-font tool
	z = `cx._FKT

	Define am fkt-gadget in the specified context.

3.  Variables

	_FKT:		slotfiller dependency (`choice)
	_CXû		context of kind variables (default = FKT context)

	_FAMILIESû	symbolic vector of families (`array)
	_KINDSû		symbolic vector of kinds (`array)
	_FAMILYû	symbolic scalar Å _FAMILIES
	_KIND_BY_FAMILYûsymbolic matrix of values (`matrix)
	

4.  Restrictions

	fkt controls set callbacks on all objects.

5.  Example

		$load s
		$load fkt

		bûfkt.define `f

		f._FAMILIESû`first `second `third
		f._KINDSû`one `two `three `four `five
		f._KIND_BY_FAMILYû((#f._KINDS),#f._FAMILIES)Ò`red `blue `green `purple `orange
		f._FAMILYû`first

		show b
		show `f._KIND_BY_FAMILY

		aûÉ10
		`a is `array
 		`a s.uses `bg `f.one `fg `f.two `editbg `f.three `selectbg `f.four `rowbg `f.five
		show `a



