ãã Copyright (c) 1990-2008 Morgan Stanley All rights reserved.
ãã See .../src/LICENSE for terms of distribution.

$cx file
file.LOADED û 1;

ã See /usr/include/sys/fcntlcom.h for source of these definitions
ã excerpts below:
ã /* @(#)fcntlcom.h 1.12 90/01/04 SMI; from UCB fcntl.h 5.2 1/8/86 */
ã
ã #define _FREAD      0x0001  /* read enabled */
ã #define _FWRITE     0x0002  /* write enabled */
ã #define _FNDELAY    0x0004  /* non blocking I/O (4.2 style) */
ã #define _FAPPEND    0x0008  /* append (writes guaranteed at the end) */
ã #define _FMARK      0x0010  /* internal; mark during gc() */
ã #define _FDEFER     0x0020  /* internal; defer for next gc pass */
ã #define _FASYNC     0x0040  /* signal pgrp when data ready */
ã #define _FSHLOCK    0x0080  /* BSD flock() shared lock present */
ã #define _FEXLOCK    0x0100  /* BSD flock() exclusive lock present */
ã #define _FCREAT     0x0200  /* open with file create */
ã #define _FTRUNC     0x0400  /* open with truncation */
ã #define _FEXCL      0x0800  /* error on open if file exists */
ã #define _FNBIO      0x1000  /* non blocking I/O (sys5 style) */
ã #define _FSYNC      0x2000  /* do all writes synchronously */
ã #define _FNONBLOCK  0x4000  /* non blocking I/O (POSIX style) */
ã #define _FNOCTTY    0x8000  /* don't assign a ctty on this open */

     (fread;fwrite;fndelay;fappend;
      fmark;fdefer;fasync;fshlock;
      fexlock;fcreat;ftrunc;fexcl;
      fnbio;fsync;fnonblock;fnoctty) û 1Ú1,«\15Ò2;

ã
ã Utilities
ã

file.rstrip{x}:if (0ÅÒ,x) ((#Òx)Ò0)Ò'' else (-Ä/@1+/@1^\@1 ' '=÷@1 x)Õ@1 x

file.read{file}:{
  if (0>sûsys.filesize{file}) ÙÂ'read failed: ',îs;
  aûsÒ`char©0; 
  fdûsys.open{file;0;0};
  sys.read{fd;a;s};
  sys.close{fd};
ã  aû(~a=`char©9)/a;     ã Removing TAB`s
  bûÚ("\n",a)="\n";     ã Breaking on CR`s
  cûbÚa;
  if (0=#(¢1+#c)Øc) cû¢1Õc;
  if ((#c)>0) if ((#(iû¢1+#c)Øc)>0) if ("\n"¨¢1ÙiØc) c[i]û<(iØc),"\n";
  cû¢1Õ¡c;
  dû>(Ó/>#¡c)Ù¡c;
ã  if (0<#d) dû(~÷^\÷^/@1 d=' ')/d;  ã Removing blank rows from end of file
  d
}

file.out{file;text;fcntl}:{
  if (2¦ÒÒtext) textûØfile.rstrip¡{<@1 text},¡"\n";
  fdûsys.open{file;fcntl;8 8 8Â10 10 10Î666};
  if (0>sys.write{fd;text;Òtext}) ÙÂ'write failed';
  sys.close{fd};
}

file.write{file;text}: file.out { file;text; `O_RDWR `O_CREAT `O_TRUNC } ã These codes translate to 1538

file.append{file;text}: file.out { file;text; `O_RDWR `O_CREAT `O_APPEND}  ã These codes trancslate to 522

ã
ã  This is an early attempt at file.append only using
ã    file.write.  It is left around only for
ã    illustrative purposes.
ã
file.append_simple{file;text}:
{
  randomfileû'/tmp/.append',1Õî100000;
  file.write{randomfile;text};
  â'$cat ',randomfile,' >>',file;
  â'$rm ',randomfile;
}
