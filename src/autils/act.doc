

				act
				===
		

0.  Description.

	The act gadget is a standard "apply/cancel" dialog box.

1.  Operation.

	_ACT is a layout of a message _MSG, an apply button _APPLY,
	and a cancel button _CANCEL.

	Assign _MSG to pop up ACT dialog.  

	Press _APPLY or _CANCEL to pop the dialog down and set the 
	result _Z to one of the symbols `apply or `cancel.

	Newlines in _MSG ("\n") are converted to new rows.

	_STUFF is an empty layout in the ACT dialog, set aside for
	the application.

	_SIZE is a boolean, which tells ABX to `naturalsize when
	it pops up (1) or not (0).

	_SHELLS is a vector of windows to make insensitive for the
	duration of the dialog.

	_LOCATE is (), or a window over which the ACT dialog is to 
	centered.  (Thanks to Rick Loukes for idea & code.)

	NB:  "Apply" and "Cancel" respect the pin-state of the dialog:
	     if pinned, the dialog will not hide, nor will any shells
	     in _SHELLS be returned to the sensitive state until the
	     dialog is unpinned and either Cancelled or Applied.

2.  zûdefine cx

	cx = target context of apply/cancel dialog
	z = `cx._ACT

	Define an act-gadget in the specified context.

3.  Variables

	_FONTû		Electric font variable
	_SIZEû		Naturalsize (1) or not (0)

	_ACTû		Outer layout
	_MSGû		Activator label
	_CANCELû	Cancel button
	_APPLYû		Apply button
	_STUFFû		Empty application layout

	_SHELLSû	Vector of windows to make insensitive
	_LOCATEû	Scalar of window over which to pop dialog

	_Zû		Result variable

4.  Restrictions

	ACT dialog controls `set and `preset callbacks on _MSG.

	pin-unpin does not hide window (`exit callback on _ACT nulled)

	Apply/Cancel action hides window regardless of pin state.

	The _STUFF layout can be used as a structure for application-
	specific operations.

	_STUFF has `newshow = 1 and `reshow = 0, s.t.

		_STUFFû`object  -->  object will be shown
		_STUFFû()	-->  object will be hidden

	_MSGû'' causes _ACT to pop up with _MSG hidden.

5.  Example

		$load s
		$load act

		$cx foo

		act.define `foo
	`foo._ACT

		foo._SHELLSû`my.win1 `my.win2
		foo._LOCATEû`my.win1

		foo._MSGû'this is a message'
		
		ã		dialog popup

		foo._Z		ã my.win1 and my.win2 are insensitive
	()
		ã		press "Apply" - dialog pops down]

		foo._Z		ã my.win1 and my.win2 are sensitive
	`apply

		foo._MSGû''	ã pop up ACT with _MSG hidden




