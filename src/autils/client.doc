

				client
				======
		

0.  Description.

	CLIENT is the client-side of the client-server connection
	gadget.

	(Also see server.doc)

1.  Operation.

	Define a CLIENT instance in context x:

		$load client
		client.define `x

	Optionally, define the service descriptor components:

		x._HOSTû
		x._PORTû
		x._PROTOCOLû
		x._NAMEû

	Make the connection:

		x._CONNECTû1

	or

		x._CONNECTû2	ã (autoreconnect)

	The variable

		x._EVENT

	contains a symbol of the most recent adap event.

	Asynchronous mode
	¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢
	To operate the client in asynchronous mode (the default):

		x._MODEû`async

	The _S variable is the input lead for sending executable
	character vectors to the server:

		x._Sû'2«3'

	The _R variable is the output lead for receiving results
	from the server:

		x._R
	   < 13
	   < < 0
	     < 5

	_R is always a two element vector of (tag;(return_code;result)):

		(22;do â '2«3')

	and _S is:

		(22;'2«3')

	where the tag is added in the preset callback to _S.

	To close the connection:

		x._CONNECTû0

	This removes all callbacks from _S and _R, and nulls them out.

	Synchronous mode
	¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢
	To operate the client in synchronous mode:

		x._MODEû`sync

	The execution loop now has the following structure:

	Suppose that the server is instantiated in context y:

		x._Sû'3«4'

		     Õ

	The *preset callback* on _S is invoked, adding a tag,
	and performing a synchronous send to the client:

		(tag;'3«4')	ý	   y._Rû(tag;'3«4')
					
					      Õ

		     Õ   	û	   y._Sû(tag;(0;12))

		(tag;(0;12)) is buffered
		'3«4' is returned from the preset callback

	The set callback on _S is now invoked:

		The buffer is assigned to _R

	Note that _EVENT will contain either `OK, or an error message
	from the synchronous exchange.

	Functional messages
	¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢¢
	x._S may also be assigned a slotfiller or association-list
	of symbolic functions and argument-lists (see server.doc).

2.  zûdefine cx

	cx = target context of CLIENT tool
	z = cx

	Define a CLIENT gadget in the specified context.

3.  Variables

	_HOSTû		`localhost
	_PORTû		12321
	_PROTOCOLû	`A
	_NAMEû		`client
	_DESCRIPTOR:	(`host;_HOST;`port;_PORT;`protocol;_PROTOCOL;`name;_NAME)

	_TIMEOUTû	1000
	_MODEû		`async

	_CONNECTû	0
	_HANDLEû	0

	_Sû		()
	_Rû		()

	_EVENTû		()

	_TAGû		¢1
	
4.  Restrictions

	Preset callback on _CONNECT
	Set and preset callbacks on _S
	
5.  Example
	

