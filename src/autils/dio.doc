

				dio
				===


0.  Description.

        Like sasha's date.in{} and date.out{}, but streamlined for  
        scalar formatting and conversion. 
 
	dio.in{} and dio.out{} do not require shadow variables.  Format-
	state information is stored on the variable in the attribute
	`s.io.

1.  Operation.

		valueûdio.in{s;string;i;p;c;v}

		stringûdio.out{s;value;i;p;c;v}

	so that:

		`a is `scalar
		      `array
		      `matrix
		      `slot
		      `tableField, where `a Å b and `b is `table

		`a has (`out;dio.out;`in;dio.in)

2. `s.io

	The variable attribute `s.io holds an array of slotfillers which
	represents the format-state of each number in a.

	It is always true that

		(Òa) ½ Ò`a _get `s.io

	`s.io can be examined and modified by the application.

3.  dio.in{}

	dio.in{} uses the function:

		(value;slotfiller)ûdio.in_{(string;slotfiller)}

4.  dio.out{}

	dio.out{} uses the function:

		stringûdio.out_{(value;slotfiller)}

5.  Slotfiller.

	Default attributes are:

		`form		`mdy
		`zero		1
		`na		¢999999999
		`max		Inf
		`min		¢Inf

		`century	(form-dependent = 0 or 1)
		`width		(form-dependent)
		`forms		(all)

	Possible values of the `form slot are:

		`mdy
		`ymd
		`md

6.  (from;to)ûdio.parse{daterange_expression}

7.  dio.FROMû1960
    dio.TOû2100
