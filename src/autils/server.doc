

				server
				======
		

0.  Description.

	SERVER is the server-side of the client-server connection 
	gadget.

	(Also see client.doc)

1.  Operation.

	Define a SERVER instance in context x:

		$load server
		server.define `x

	Optionally, define the service descriptor components:

		x._HOSTû
		x._PORTû
		x._PROTOCOLû
		x._NAMEû

	Listen for connections:

		x._LISTENû1

	When a client connects, a new context is generated:

		x_i	

	where i is a numerical suffix.

	x_i contains two variables:

		x_i._S
		x_i._R

	These variables complete the execution loop of the corresponding
	variables in the client context, viz., when the client sends 
	a character vector to the server, the variable _R is assigned;
	this triggers a callback which does a protected execute of the
	data, and the result is assigned to _S; this in turn triggers
	a callback which sends the result to the client:

		y._Sû'2+2'	    

		     Õ

		y._Sû(tag;'2+2')     ý       x_i._Rû(tag;'2+2')

					             Õ

		y._Rû(tag;(0;4))     û       x_i._Sû(tag;do â x_i._R)

	The variable

		x._EVENT

	contains a symbol of the most recent adap event.

	The variable

		x._EXECUTE
	
	is a slotfiller of the form

		(`sym0 ... `symn;(x0;...;xn))

	where xi is either a function or a pair of (function;client_data).

	The client input-lead

		y._S

	may be specified as either an executable string, as above, or a
	slotfiller or association-list whose symbols Å 0Øy._EXECUTE, and
	whose slots are argument-lists for the corresponding functions.

	E.g.,

		print{x}:Ý Õx
		return{x}:x
		add{x;y}:x+y

		x._EXECUTEû(`print `return `add;(print;return;add))

		y._Sû(`print;É3;`add;(2;20))

		y._R
	    < tag
	      < < 0
	      < < < 
	        < 22

	Note that the result is always returned to the client as a scalar
	box:

		y._Sû(`add;(2;3))

		y._R
	    < tag
	      < < 0
	        < < 5

	Additionally, there are two transient global variables in the 
	server-instance context:

		_CONTEXT	symbol of "current" client-connection context
		_HANDLE		handle "current" client

	To shutdown the SERVER instance:

		x._LISTENû0

	This closes the listening port and all connections.

2.  zûdefine cx

	cx = target context of SERVER tool
	z = cx

	Define a SERVER gadget in the specified context.

3.  Variables

      In the server-instance context:

	_HOSTû		`localhost
	_PORTû		12321
	_PROTOCOLû	`A
	_NAMEû		`server
	_DESCRIPTOR:	(`host;_HOST;`port;_PORT;`protocol;_PROTOCOL;`name;_NAME)

	_LISTENû	0
	_LISTEN_HANDLEû	0

	_CONTEXTSû	()
	_HANDLESû	É0

	_SENDû		()
	_RECEIVEû	()

	_EVENT

	_EXECUTEû	(;)

      In the client-instance sub-context:

	_Sû		()
	_Rû		()
	
4.  Restrictions

	Preset callback on _LISTEN
	Set callbacks on _R and _S
	
5.  Example
	


