

				sst
				===
		

0.  Description.

	The SST gadget provides a standard mechanism for moving
	selected items from a list _LIST back and forth between two 
	lists _L and _R, and for manually sorting the items in list 
	_R.

	SST also supports optional "select for up/down-sort" buttons.

1.  Operation.

		_LIST û `one `two `three

		_L	_R
		¢¢	¢¢
		one
		two
		three

	Delete item "two" in _L:

		_L	_R	
		¢¢	¢¢
		one	two	<--  item "two" moved to _R
		three

	Delete item "two" in _R:

		_L	_R
		¢¢	¢¢
		one
		two	     	<--  item "two" moved back to _L
		three

	Delete items "three", "one" in _R:

		_L	_R
		¢¢	¢¢
		two	three	< -- not desired order
			one

	Refer to item "one" in _R and cursor up:

		_L	_R
		¢¢	¢¢
		two	one	< -- indexed item moved
			three
		
	Refer to item "one" again:

		_L	_R
		¢¢	¢¢
		two	one	< -- item de-indexed
			three

	NB:  _LL and _RR (">>" and "<<") are functionally equivalent
	     to delete actions in _L and _R.

2.  zûdefine cx

	cx = target context of sort and select gadget
	z = `cx._SST

	Define a sort and select gadget in the specified context.

3.  Variables

	_LISTû		Symbolic vector or character matrix of items
	_SORTû		0 (select) or 1 (select and sort)
	_TSORTû		toggle è ûý ç on selected item in _R
	_DIRECTIONSû	'èç'  (only if _SORT = 1)
	_INDEXû		1 (retain index of _R while moving), or 0 (do not)

	_L:		Left list (integer vector dependency)
	_Rû		Right list
	_SSTû		layout containing _LL, _RR, _L and _R
	_LLû		button to move item from _L to _R
	_RRû		button to move item from _R to _L
	_LEFT:		_L#_LIST
	_RIGHT:		_R#_LIST
	_UPDOWN:	right argument to t.sort{}
	_LLLû		button to move item from _L to _R and sort down.

4.  Restrictions

	_SORT		may be assigned 0 or 1

	_INDEX		may be assigned 0 or 1
	
			(note:  for applications where items in the right list will be
				moved mainly though the use of the mouse (point and click), 
				_INDEX should be 0.)

	_LIST		the only input to SST, may be assigned freely.
			SST controls the set callback, and modifies the
			`space of _L and _R to match the maximum width
			of items in _LIST.

	_LL		button, may not be assigned
	_RR		button, may not be assigned
	_LLL		button, may not be assigned
	_TSORT		button, may not be assigned	
	
	_L		dependency, may not be assigned
			attributes controlled by SST:
	
				`out
				`delete
				`protect

	_R		may be assigned
			attributes controlled by SST:

				`out
				`delete
				`refer
				`select
				`protect

	_SST		may not be assigned

5.  Example
	
	1.  Select:

		$load s
		$load sst

		aûÉ3
		`a is `array
		bûsst.define `foo
		b
	`foo._SST
		foo._LISTû`one `two `three
		cû`a,b
		show `c is `layout

	2.  Select and sort up or down:
	
		sst.define `
		_LISTû`one `two `three `four `five
		_SORTû1
		show `_SST

	    Note:  Elements of _RIGHT are prefixed with 0#_DIRECTIONS
		   if ¦ 0, 1#_DIRECTIONS if < 0.


