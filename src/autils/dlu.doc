

				dlu
				===
		

0.  Description.

	The dlu gadget provides yet another standard mechanism for navigating 
	directories and applying file operations on selected elements.

1.  Operation.

	_FILES is a list of files and directories in the directory _DIR
	which pass the test implied by _FILTERS.  This test is:  an entry
	in _DIR which is either a suffixless directory, or ends in a suffix
	which matches one of (>1Ø_FILTERS)/0Ø_FILTERS.

	A directory can be specified by choosing it from the directory tree
	_DIRS.

	Selecting a file in the list causes _FILE to be assigned.

2.  zûdefine cx

	cx = target context of directory-looker-upper
	z = `cx._DLU

	Define a dlu-gadget in the specified context.

3.  Variables

	cx._GOû		0/1 - trigger, defaulted to 0
	cx._PATHû	Path, bound to a `scalar

	cx._FILES:	Filtered file-list
	cx._DIRS:	directory-tree, dependent on _GO
	cx._PANEû	`vpane containing _DIRS and _FILES

	cx._FILTERSû	`check or `radio of filename suffixes
	cx._DLUû	`layout containing the above

	cx._FILEû	referenced file
	cx._VIEW:	sys.readmat _DIR,_FILE

4.  Restrictions

	cx._PATH	input to dlu, may be assigned freely.
			attributes controlled by dlu:

				`preset

	cx._FILTERS	input to dlu, may be assigned freely.
	
	cx._DIRS	dependency, may not be assigned.
			attributes controlled by dlu:
	
				`set
	
	cx._FILES	dependency, may not be assigned.
			attributes controlled by dlu:
	
				`select

	cx._FILE	last file referred to, may not be assigned

5.  Example

		$load s
		$load dlu

		bûdlu.define `foo
		b
	`foo._S
		foo._DIRû''
		foo._FILTERSû(`a,Â'+';(1;0))

		show b

		foo._GOû1

		show `foo._VIEW





