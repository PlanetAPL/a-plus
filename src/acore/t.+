ãã Copyright (c) 1990-2008 Morgan Stanley All rights reserved.
ãã See .../src/LICENSE for terms of distribution.

$cx t

NEWLINEû"\n"
TRIGGERû()
CONNECTû^
RESERVEDû`_A`_D`_F`_J`_K`_L`_M`_N`_R`_S`_T`_V`_D_`_L_`_R_`_S_`_V_`_T_`_U
NAû(`int `float `char `sym `box `func `null;(¢999999999;¢999999999.0;' ';`;<();<{Û};<()))
DOT_Tû'.T'
DOTû`.
VERSIONû1

ãã ***	Utilities

expunge{b;var}:if (b^vÅRESERVED Ý define_execute{c;v;`t.close;} Ý _ex{c,v} Ý (c;v)ûvar) (c%v)û()
sent{d}:(Øb/s;b/z) Ý bû0<Ø#¡s Ý sûz _get¡`t.sent Ý zûdÖd%`_T 
sent_from{s;d}:1#ôÖ(s=0#ôÖa)/b Ý (a;b)ûsent{d}
bound{c}:bound_var{s_arg{c}}
bound_var{v}:0<s.g_varWid{v}
nsr{a;b;c}:if (`nullÅ>©¡(a;b;c)) a else _gsr{a;b;c;'_.`¢'}
exp{s;e}:if (`char=©e) âe_e{s;e} else s_e{s;e}
e_e{s;e}:if (1<#s) e_ev{s;e} else nsr{e;Î¡f;Î¡sÖf} Ý fûs%`_T Ý sû''Òs
e_ev{s;e}:nsr{e;Î¡f;(<'(Ø'),¡c_v¡{<s;f},¡')'} Ý fûs[0]%`_T
n_e{e}:if (e½()) 1 else if (`char=©e) ^/' '=,e else 0
na{x}:if (~()½zû_get{x;`na}) z else if (()½yûparent{x}) (©%x)ØNA else if ((©%x)¨©z Ý zû&{y}) (©%x)ØNA else z
parent{x}:if (`_T=v Ý (d;v)ûÖx) (0Ø1Ùd%`_S)Öv else _get{x;`t.sent}
get{x;y}:if (~©/bû`null=>©¡zû_get¡{x;y}) z else if (()½rûparent{x}) z else z Ý (b/z)û&{r;b/y}
atts{x;y}:if (()½rûparent{x} Ý zû_atts{x;y}) z else unique{z,&{r;y}}
sel{s;d;i;p;c;v}:âe_e{c;i}
s_e{c;x}:z Ý (iû#a Ý (a;b)û_alsf{x} Ý zû(c%`_N)Òf½<{^} Ý fûe_f{CONNECT}) do zûz f¡s_e_0{c;i#a;iØb}
s_e_0{c;v;i}:f¡{s;c%v;i;();c;v} Ý (f;s)ûse{cÖv}
se{x}:if (~()½zû_get{x;`t.selector}) 2Ùe_f{z} else if (()½yû_get{x;`t.sent}) (sel;) else &{y}
sv_na{s;v}:(sÖv;na{sÖv})
index{i;s}:if (i½()) %s else _index{i;%s;na{s}}
index_na{i;x}:if (i½() Ý (s;nav)ûx) %s else _index{i;%s;nav}
p_index{i;v;n;nav}:z Ý (jû#uk Ý ukûunique{k} Ý zû((#i),1ÕÒ%0#v)Ònav Ý kû(¢1+nn)èi Ý nnû+\n) do (p/z)ûq#%b#v Ý qûa-b#0,nn Ý aûp/i Ý pûk=b Ý bûj#uk
index_each{i;v;n}:if (i½()) Ø%¡v else p_index{i;v;n;na{0#v}}
unique{z}:((zÉz)=É#z)/z
f_f{fn}:if (`char=©fn) fn else '>',if ((#r)=jûrÉfn Ý sû('+/';'«/';'Ä/';'Ó/';'^/';'©/') Ý rû(+/;«/;Ä/;Ó/;^/;©/)) Î_name{fn} else jØs
i_v{b}:b/É#b
c_v{c;vs}:e_v{Î¡cÖvs} 
e_v{z}:if (1=#z) '<',,>z else '(',(1ÕØ';',¡z),')'
e_f{f}:if (¢1=½f) <{f} else f
count{v;k;n}:if (~()½v) #v else if (0<mû#k) m else n
f_0{d}:if (()½t Ý tûd%`_T) '()' else Î0#t
def_N{d}:d%`_N Ý make_N{d}
make_N{d}:dâ'_N:',(if (0=#s Ý sûd%`_S) '#',f_0{d} else 't.count{_V;_K;+/>',c_v{s;`_N},'}'),' Ý t.TRIGGER'
depth{d}:if (()½pûd%`_S) 0 else 1+Ó/>p%¡`_M
linked{d;x}:if (1Åbû(3Ù@1 v)½@1 x Ý vûÎnames{d}) Â3Õ@1 b/v
fields{d}:if (0<#zûnames{d}) if (0<#zû('_'¨0#ôÎz)/z) (èÎz)#z
names{d}:unique{_nl{d;`vars},_nl{d;`deps}}
strip_f{d;f}:if (0<#f) (èèb)#((~b)/f),b/g[;1] Ý bûd=g[;0] Ý gûÖfû,f
add_f{d;v}:def_N{d} Ý (d%`_T)[,]û((vÅ`_)©~('_'=0#1ÙôÎv)©vÅd%`_T)/v Ý vûif (()½v) fields{d} else strip_f{d;v}
drop_f{d;v}:def_N{d} Ý (d%`_T)û(~tÅv)/tûd%`_T Ý vûstrip_f{d;v}
sort_f{vb}:if (0<½vb) ,¡>¡_alsf{vb} else (,vb;(#vb)Ò0)
tree{x;k}:if (k=0 Ý (d;s)ûx) (d;,<&{x;1}) else if (0<#cûd%s) (c;&¡{c,¡s;k})
dag{x;p}:if (dÅp Ý (d;s)ûx) 0 2Ò() else if (0=#cûd%s) 0 2Ò() else (ôd~c),if (0<#eûØ&¡{c,¡s;(<p,d),¡(<@1 cÊ.¨c)/¡<c}) e else 0 2Ò()
exists{d;v}:_nc{d;v}Å`vars `deps
is_dir{x}:0#(15Ò2)Î2#sys.astat{x}
file_exists{fs}:¢1¨sys.filesize{fs}
cx_exists{cx}:cxÅ_nl{;`cxs}
trigger{}:t.TRIGGERû()
in{a;b}:aÅ>(1#Òa)Ù¡1Õ¡(Ú','=b)Úbû',',b
match{a;b}:a[;É#b]½@1 bû,b
find{a;b}:(É#a)Å0#_ss{a;b}
tile{n;x}:Ä(èèx)«nß#x
top{d}:if (()½sûd%`_S) d else Ø&¡{s}
safe{s;d;f;g}:((~g)©z¨`_)/z Ý zûif (f©~dÅTABLES Ý tûs%`_T) t else (~>1Å¡(dÅ¡0#¡k)^¡~¡`_NÅ¡1#¡k Ý kûô¡Ö¡_alldep¡{sÖt})/t
comp{d}:if (0=#sû,d%`_S) É0 else if (()½vûd%`_V) É0 else if (~v½É0 Ý nûÉ(0#s)%`_N) (~nÅv)/n else n
intersect{e;v}:if (()½v) e else (eÅv)/e
pick{s;sf}:if (0<#sf) if (sÅ0Øsf) sØsf
pick_set{s;sf;z}:sf Ý if (0<#sf) if (sÅ0Øsf) (sØsf)ûz
rsf{o}:if (0¨rc Ý (rc;z)ûdo _alsf{o}) o else (r;v) Ý if (1Åbû0<Ø½¡v Ý (r;v)ûz) (b/v)û&¡{b/v}
map{y;x}:Ý if (()½x Ý (d;v)ûif (2=#y) y else Öy) (d%v)û() else if (~','Åf Ý (n;f)ûx) (d%v)ûi_beam{n;f} else (iû#gû1Õ¡(Ú','=g)Úgû',',f) do if (i=0) (d%v)ûi_beam{n;0Øg} else (d%v)[,]ûi_beam{n;iØg}
un_map{x;dir}:(1Õîm),'à',f Ý fû('/'=1Ùf)Õf Ý fû(#dir)Õf Ý (m;f)ûx
i_beam{y;x}:if (¢1½y) sys.imp{àx} else if (¢2½y) âàÛx else if (¢3½y) Ûàx else yàx
mesh{s;l}:d,¡if (l=dûs%`_M) (Ò¡s%`_J)Ò¡¢1+d else Ø¡(s%`_J)#¡<&{s%`_S;l}
merge_0{s;d;l}:(èèØmesh{s;l})#(Øk[1]%`_J),m[0]ÕØ(0,¢1Õ+\m)+¡É¡m Ý mû>k%¡`_N Ý kûd%`_S
d_q{x}:(1+xÅ'"''')/x
s_arg{c}:if (1<#c) c else if ('.'ÅÎc) Öc else c,`_T_
g_dot_T{dir}:if (((1ÕÒf)ÙDOT_T)Åf Ý fûsys.agetdents{dir}) sys.imp{Ûàdot_T{dir}}
s_dot_T{dir;x}:dot_T{dir}àsys.exp{x}
dot_T{dir}:dir,(('/'¨¢1Ùdir)/'/'),DOT_T
valid{c;t;u}:if (0<#t) if (0<#u) u else (s_valid@0{cÖt})/t
s_valid{v}:if (0½_get{v;`t.visible}) 0 else if (0<#_get{v;`t.item}) 0 else (1=r)©(rÅ1 2)^`char=p Ý rû#Òd Ý pû©d Ý dû%v

path{p}:
	{
	(u;a)û(nÙ¡<p;nÕ¡<p) Ý nû1Õ(<@0('/'=p)/É#p),<#p;
	iû(>©¡l)É`char Ý lûsys.areadlink¡{u};
	if (i<#l) pû&{ØiØ¡(l;a)};
	if ('/a/'½3Ùp) 2Õp else p
	}

view_related{s;d}:(^/>dÅ¡s%¡`_D)^^/sÅd%`_S
link_related{s;d}:(sÅd%`_R)©dÅs%`_R

related{sd}:
	{
		if (~^/sdÅTABLES) 			Ù`domain 
	else 	if (©/sÅd Ý (s;d)û(¢1Õsd;0#¢1Ùsd)) 	Ù`self 
	else 	if (view_related{s;d}) 			(s;d) 
	else 	if (link_related{0#s;d}) 		(s;d) 
	else 						Ù`domain
	}

type{s;d}:
	{
		if (1<#s) 			`cat 
	else 	if (dÅs[0]%`_R) 		`right 
	else 	if (dÅs[0]%`_L) 		`left 
	else 	if (~()½d%`_K) 			`group 
	else 	if (1=#k Ý kûd%`_S) 		`view
	else 	if (~(¢1Õk)½Ø(1Õk)%¡`_S) 	`view
	else 	if (~^/>`_Å¡k%¡`_T) 		`view
	else 					`report
	}

ãã ***  Time-series utilities

ã  $load /ms/dist/apluslib/PROJ/a/1.0/common/dio

calendar{x}:
	{
	(f;t)ûdio.parse{x};
	(fa;ta)ûdio.wday¡{0;f,t};
	dio.wday{1;(É1+ta-fa)+fa}
	}

series{y;x}:
	{
	(f;t)ûdio.parse{x};
	cû_get{y;`t.calendar};
	if (f<0) fûc[0];
	if (t<0) tûc[¢1+#c];
	(fi;ti)ûcèf,t;
	fi+É1+ti-fi
	}

ãã ***	Algorithms

sort_func{f;x}:if (1Å`int `float `charÅt Ý tû©x) f{x} else if (`symÅt) f{Îx} else Ù`nonce
up{x}:if (0=#x) É0 else sort_func{è;x}
down{x}:if (0=#x) É0 else sort_func{ç;x}
view_sort{d;b}:if (1=#d) (bØ(up;down))¡0Ød else z Ý (*iû#d Ý zûÉ#0Ød Ý hûb#(up;down)) do zû((i#h)¡z#iØd)#z

index_of{f;g}:(ô>fÉ¡f)Éô>fÉ¡g
link_index{f;g}:if (1=#f) (>''Òf)É>''Òg else index_of{f;g}
link_part{n;i}:((1Õb)-¢1Õbûi[j]èÉ1+n)Újûèi

link_b_pr{f;g;h}:ôb.pr{g;h;f}
link_b_part{i;h}:(i[;0]+¡É¡i[;1])#¡<h
link_b_index{l;r;j}:z Ý z[Øj]û(>#¡j)/Él%`_N Ý zûnÒn Ý nûr%`_N

group_part{f;r}:(Úb¨¢1Õ¢1,bûj#k)ÚjûèkûkÉkûô>if (r½() Ý (f;r)û,¡(f;r)) fÉ¡f else rè¡f

first{n;j}:if (~1Åbû0<Ø#¡j) (#b)Òn else k Ý ((~b)/k)ûn Ý kûb\>0#¡b/j

merge{s;d0;d1}:merge_0{d0;d1;1+s%`_M}

ãã ***	Update -- []û, [i]û, [,]û, and (bool/v)û supported

view_scb{s;d;i;p;c;v}:
	{
	if (~i½()) if (0=½i) iû(#Òs%v)Ù,<i;
	wûc%`_V Ý nûc%`_N;
	if (i½()) {if (8=0Ødo (s%v)[w]ûc%v) (s%v)ûc%v}
	else if (n¦#c%v) (s%v)[if (©/(0Øk)¦#s%v) , else k]ûd Ý kû,if (()½w) i else (<(0Ø,i)#w),1Õi
	else if (~()½w Ý (s%v)[,]ûd) (c%`_V)ûw,n+if ((#Òc%v)=#Òd) É#d else 0;
	trigger{};
	}

cat_scb{s;d;i;p;c;v}:
	{
	if (~i½()) if (0=½i) iû(#Òs%v)Ù,<i;
	wûc%`_V Ý nûc%`_N Ý mû+\>s%¡`_N;
	if ((0=#Òd)^i½()) (jû#s) do (s[j]%v)[]ûd
	else if (i½()) (jû#s Ý rû(¢1+m)èw Ý if (w½()) wûÉn) do (s[j]%v)[(-j#0,m)+k/w]ûk/d Ý kûr=j
	else if (n¦#c%v) (jû#s Ý rû(¢1+m)èw Ý wûif (()½w) 0Ø,i else (0Ø,i)#w) do (s[j]%v)[if (©/(0Øp)¦#s[j]%v) , else p]ûk/d Ý pû(<(-j#0,m)+k/w),1Õi Ý kûr=j
	else if (~()½w Ý (s[¢1+#s]%v)[,]ûd) (c%`_V)ûw,m[¢1+#m]+if ((#Òc%v)=#Òd) É#d else 0;
	trigger{};
	}

ãã ***	S interface

insert{s;c;v}:if (1=#kûc%`_S) insert_view{s;c;v;k} else insert_cat{s;c;v;k}

insert_view{s;c;v;k}:
	{
	(m;cp)ûif (`vars=_nc{`s;`AUTOCOPY}) .of{`row `copy;c,v} else (0Ø.of{`row;c,v};0);
	if (()½iûc%`_V) iûÉc%`_N;
 	(pû#t Ý tûc%v Ý nûk%`_N) do append_in_place{k;c;p#t;m;cp};
	(c%`_V)û(mÙi),n,mÕi Ý mû0Ós+m;
	trigger{};
	}

insert_cat{s;c;v;k}:
	{	
	(m;cp)ûif (`vars=_nc{`s;`AUTOCOPY}) .of{`row `copy;c,v} else (0Ø.of{`row;c,v};0);
	if (()½iûc%`_V) iûÉc%`_N;
	(pû#t Ý Ý tûc%v Ý nûk%`_N Ý kûj#k Ý jû(¢1+p)èm Ý pû+\,>k%¡`_N) do append_in_place{k;c;p#t;m;cp};
	(c%`_V)û(mÙi),n,mÕi Ý mû0Ós+m;
	trigger{};
	}

append_in_place{c;d;v;i;cp}:(d%v)[,]ûif (~cp) (1ÕÒd%v)Òna{cÖv} else i#c%v

delete{s;c;v}:if (1=#kûc%`_S) delete_view{s;c;v;k} else delete_cat{s;c;v;k}

delete_view{s;c;v;k}:
	{
	if (¢1=mû0Ø.of{`row;c,v}) û();
	if (()½iûc%`_V) iûÉc%`_N;
	(k%¡t)û(<i[m]¨Én)/¡k%¡t Ý nûk%`_N Ý tûc%`_T_;
	(c%`_V)û(i[m]¨i)/i-i[m]<i;
	trigger{};
	}

delete_cat{s;c;v;k}:
	{
	if (¢1=mû0Ø.of{`row;c,v}) û();
	if (()½iûc%`_V) iûÉc%`_N;
	(k%¡t)û(<(i[m]-q)¨Én)/¡k%¡t Ý nûk%`_N Ý tûc%`_T_ Ý qûj#0,p Ý kûj#k Ý jû(¢1+p)èm Ý pû+\,>k%¡`_N;
	(c%`_V)û(i[m]¨i)/i-i[m]<i;
	trigger{};
	}

table{c}:
	{
	(c;v)ûs_arg{c};
	.is{c,v;`table};
	has{cÖ`_T,`_T_;`table};
	has¡{cÖc%v;`tableField};
 	if (0<#c%`_S) .has{c,v;(`insertbelow;(insert;1);`insertabove;(insert;0);`delete;delete)};
	if (`_Åc%`_T_)
		{
		.has{cÖ`_;(`out;reportOut)};
		(c%`_U)û`_,(~(c%v)Å`_,Ø_get{c,`_;`t.report})/c%v;
		.has¡{cÖc%`_T;<(`protect;reportProtect)};
		};
	cÖv
	}

has{vars;cls}:
	{
	(fvar;tvar)û2Òvars;
	symsûatts{fvar;`};
	symsûunique{1#ôÖsyms};
	symsû(~symsÅ`na`)/syms;				ã ****** kludge - fix
	valsûget{fvar;syms};
	(syms;vals)û(<`null¨>©¡vals)/¡(syms;vals);
	(syms;vals)û(<symsÅs.attributes{cls})/¡(syms;vals);
	if (0<#syms) s.has{tvar;(syms;vals)};
	}

reportOut{s;d;i;p;c;v}:
	{
	if (d=0) ''
	else if ((d<0)©d>#t Ý tû_get{c,v;`t.report}) 'total:'
	else
		{
		kû1ÕØ',',¡Ø¡.of¡{`title;cÖw} Ý wû(¢1+d)Ø÷t;
		nû1ÕØ',',¡Ø¡.of¡{(<<`out),¡<¡(<i)#¡c%¡w;cÖw};
		nû(-+/^\÷n=' ')Õn;
		zû((2«(#t)-d)Ò' '),k,'=',n;
		if ((#z)>0Ø.of{`space;c,v}) .has{c,v;(`space;#z)};
		z
		}
	}

reportProtect{s;d;i;p;c;v}:0¨i#c%`_

ãã ***  Detach

detach{y;junk}:
	{
	if (0=#y) û();
	(s;d)ûif (1=#y) (;y) else (¢1Õy;0#¢1Ùy);
	(ss;ll;rr)ûd%¡`_S `_L `_R;
	if (()½s) sûss,ll,rr;
	(iû#s) do 
		{
		case (i#s)
			{
			ss;	detach_view{i#s;d};
			ll;	detach_link{d;i#s};
			rr;	detach_link{i#s;d};
			};
		};
	def_N{d};
	trigger{};
	s,d
	}

detach_view{s;d}:
	{
	fsûdÖsent_from{s;d},`_V `_J `_K `_V_ `_F `_A;
	_undef¡{fs} Ý (d%¡fs)ûd%¡fs;
	(d%`_S)û(k¨s)/k Ý kûd%`_S;
	(s%`_D)û(k¨d)/k Ý kûs%`_D;
	}

detach_link{s;d}:
	{
	(i;j;k)û(sÖÂ'_I_',Îd;dÖÂ'_J_',Îs;dÖÂ'_K_',Îs);
	fsû(dÖsent_from{s;d}),sÖsent_from{d;s};
	_undef¡{dÖfs} Ý (d%¡fs)ûd%¡fs;
	_ex¡{i,j,k};
	link_pointers{s;d};
	}

ãã ***	Send

send{y;x}:if ((0=½y)^(`sym=©y)^(1=#Òy)^2¤#y) send_{y;x} else open{y;x}

send_{sd;x}:
	{
	(s;d)ûrelated{sd};
	tûtype{s;d};
	if (()½x) xûsafe{0#s;d;(0<#_def{dÖ`_V})©t=`group;t=`report};
	if (()½x) û0 2Ò();
	yûif (0<½x) ô>_alsf{x} else >,2Ù¡<¡x;
	zûcase (t)
		{
		`cat;		cat_send@1 1{sd;y};
		`right;		link_send_right@1 1{sd;y};
		`left;		link_send_left@1 1{sd;y};
		`group;		group_send@1 1{sd;y};
		`view;		view_send@1 1{sd;y};
		`report;	report_send@1 1{sd;y};
		};
	trigger{};
	(s[0],d)Ö@1 1 z
	}

send_arg{x}:if (_issf{z} Ý (v;z)ûx) send_arg_slot{v;z} else send_arg_nested{v;z}

send_def{s;d;v0;v1}:dâ(Îv1),(Ä/zÉ':[')Õz Ý zû_def{s,v0}
send_sub{v;h;k}:if (()½h) k else nsr{h;v;'(',k,')'}

send_arg_slot{v;sf}:
	{
	wûif (~`_fromÅ0Øsf) v else `_fromØsf;
	uûif (~`_typeÅ0Øsf) '' else if (0¨i Ý iû`_typeØsf) i else '';
	aûif (~`_funcÅ0Øsf) () else `_funcØsf;
	bûif (~`_frameÅ0Øsf) () else `_frameØsf;
	(1#Öw;1#Öv;u;a;b)
	}

send_arg_nested{v;z}:
	{
	tû>©¡zû,z;		
	wûif ((#z)=jûtÉ`sym) v else jØz;
	uûif ((#z)=jûtÉ`int) '' else if (0¨i Ý iûjØz) i else '';
	if (0=½z) zû,<z;
	(1#Öw;1#Öv;u),2Ùif (`funcÅt Ý tû>©¡z) ((tÉ`func)Øz;if (`charÅt) 1Õ(tÉ`char)Øz)
	else case (+/b Ý bû`char=t)
		{
		1;	if (':'=1Ùs Ý sû>(bÉ1)#z) (;1Õs) else (s;);
		2;	if (':'=1Ùs Ý sû>(bÉ1)#z) (>''Ò1Õz;1Õs) else (s;1Õ>''Ò1Õz)
		}
	}

report_send{sd;y}:
	{
	(s;d)ûsd;
	kûd%`_S;
	group_send@1 1{¢2!(kÉs)Õk;y};
	cat_send{k,d;y}
	}

view_send{sd;x}:
	{
	(v0;v1;b;xxx;hh)ûsend_arg{x};
	(s;d)ûsd;
	if ((sÖv0)Å_alldep{dÖv1}) Ù`cycle;
	_set{d,v1;(`t.sent;sÖv0)};
	if (`int=©b) send_def{s;d;v0;v1} else dâ(Îv1),':',send_sub{Îv1;hh;'t.index{_V;`',v,'} Ý ',v} Ý vûÎsÖv0;
	_scb{d,v1;(view_scb;s)};
	add_f{d;v1};
	v0,v1
	}

cat_send{sd;x}:
	{
	(v0;v1;b;xxx;hh)ûsend_arg{x};
	uûØ' ',¡'Ý',¡' ',¡v Ý wûØ'`',¡v Ý vûÎ¡sÖv0 Ý (s;d)û(¢1Õsd;0#¢1Ùsd);
	if (©/(sÖv0)Å_alldep{dÖv1}) Ù`cycle;
	_set{d,v1;(`t.sent;s[0]Öv0)};
	if (`int=©b) send_def{0#s;d;v0;v1} else dâ(Îv1),':',send_sub{Îv1;hh;'t.index_each{_V;',w,';>',c_v{s;`_N},'} Ý ',u};
	_scb{d,v1;(cat_scb;s)};
	add_f{d;v1};
	v0,v1
	}

link_send_right{sd;x}:
	{
	(v0;v1;b;xxx;hh)ûsend_arg{x};
	(s;d)ûsd;
	if ((sÖv0)Å_alldep{dÖv1}) Ù`cycle;
	_set{d,v1;(`t.sent;sÖv0)};
	if (`int=©b) send_def{s;d;v0;v1} else dâ(Îv1),':',send_sub{Îv1;hh;'t.index{_I_',(Îs),';`',v,'} Ý ',v} Ý vûÎsÖv0;
	add_f{d;v1};
	v0,v1
	}

link_send_left{sd;x}:
	{
	(v0;v1;b;h;hh)ûsend_arg{x};
	(s;d)ûsd;
	if ((sÖv0)Å_alldep{dÖv1}) Ù`cycle;
	_set{d,v1;(`t.sent;sÖv0)};
	if (`int=©b) send_def{s;d;v0;v1} else dâ(Îv1),':',send_sub{Îv1;hh;link_send_def{s;d;v0;v1;h}};
	add_f{d;v1};
	v0,v1
	}

link_send_def{s;d;v0;v1;h}:if (()½hûe_f{h}) link_send_first{s;d;v0;v1} else link_send_func{s;d;v0;v1;h}
link_send_first{s;d;v0;v1}:'t.index{',k,';`',v,'} Ý ',v,' Ý ',k Ý kû'_K_',Îs Ý vûÎsÖv0
link_send_func{s;d;v0;v1;h}:if (h½<{<}) link_send_body{s;d;v0;v1} else link_send_reduce{s;d;v0;v1;h}
link_send_body{s;d;v0;v1}:if (`int¨©d%Â'_J_',Îs) link_send_nested{s;d;v0;v1} else link_send_simple{s;d;v0;v1}
link_send_reduce{s;d;v0;v1;h}:'if (~()½zû',link_send_body{s;d;v0;v1},') ',f_f{h},'¡z else 0Òt.na{`',(ÎsÖv0),'}'
link_send_nested{s;d;v0;v1}:'t.link_J{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _J_',Îs
link_send_simple{s;d;v0;v1}:'t.link_H{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _J_',(Îs),' Ý _K_',(Îs),' Ý ',(Îs),'._H_',Îd

link_J{s;d;v}:index_na¡{d%Â'_J_',Îs;<sv_na{s;v}}
link_H{s;d;v}:index_na¡{if (()½hûs%Â'_H_',Îd Ý zû(d%Â'_K_',Îs)+¡É¡d%Â'_J_',Îs) z else z#¡<h;<sv_na{s;v}}

group_send{sd;x}:
	{
	(v0;v1;b;h;hh)ûsend_arg{x};
	(s;d)ûsd;
	if ((sÖv0)Å_alldep{dÖv1}) Ù`cycle;
	_set{d,v1;(`t.sent;sÖv0)};
	if (`int=©b) send_def{s;d;v0;v1} else dâ(Îv1),':',send_sub{Îv1;hh;group_send_def{s;d;v0;v1;h}};
	add_f{d;v1};
	v0,v1
	}

group_send_def{s;d;v0;v1;h}:if (()½hûe_f{h}) group_send_first{s;d;v0;v1} else group_send_func{s;d;v0;v1;h}
group_send_first{s;d;v0;v1}:if (`int¨©d%`_J) group_send_first_nested{s;d;v0;v1} else group_send_first_simple{s;d;v0;v1}
group_send_first_nested{s;d;v0;v1}:'t.group_K{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _V Ý _K'
group_send_first_simple{s;d;v0;v1}:'t.group_K_H{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _V Ý _K Ý ',ÎsÖÂ'_H_',Îd
group_send_func{s;d;v0;v1;h}:if (h½<{<}) group_send_body{s;d;v0;v1} else group_send_reduce{s;d;v0;v1;h}
group_send_body{s;d;v0;v1}:if (`int¨©d%`_J) group_send_nested{s;d;v0;v1} else group_send_simple{s;d;v0;v1}
group_send_reduce{s;d;v0;v1;h}:'if (~()½zû',group_send_body{s;d;v0;v1},') ',f_f{h},'¡z else 0Òt.na{`',(ÎsÖv0),'}'
group_send_nested{s;d;v0;v1}:'t.group_J{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _V Ý _J'
group_send_simple{s;d;v0;v1}:'t.group_H{`',(Îs),';`',(Îd),';`',(Îv0),'} Ý ',(ÎsÖv0),' Ý _V Ý _J Ý _K Ý ',ÎsÖÂ'_H_',Îd

group_K{s;d;v}:index{index{d%`_V;dÖ`_K};sÖv}
group_K_H{s;d;v}:index{index{index{d%`_V;dÖ`_K};sÖÂ'_H_',Îd};sÖv}
group_H{s;d;v}:index_na¡{if (()½h Ý zûindex{i;dÖ`_K}+¡É¡index{i;dÖ`_J} Ý iûd%`_V) z else z#¡<h;<sv_na{s;v}} Ý hûs%Â'_H_',Îd
group_J{s;d;v}:index_na¡{index{d%`_V;dÖ`_J};<sv_na{s;v}}

ãã ***  Open

load{y;x}:if (0=#dir Ý (d;dir)ûleft_arg{y}) open_{d;dir;x} else open_cd{d;dir;x}

open{y;x}:open_{d;dir;x} Ý (d;dir)ûleft_arg{y}

open_cd{d;dir;x}:
	{
	pwdûsys.readenv{'PWD'};
	if (0¨rcûsys.chdir{dir}) Ù`cd;
	(rc;z)ûdo open_{d;'';x};
	sys.chdir{pwd};
	if (rc=0) z else Ùz
	}

open_{d;dir;x}:
	{
	if (open_if{d}) def_N{d};
	if ((dir½())^(©x)Å`sym `null) trigger{} Ý add_f{d;x} 
	else
		{
		if (x½()) xûg_dot_T{dir};
		xûcase (©x)
			{
			`sym;	(x;(#x)Ù());
			`box;	x;
				right_arg{dir;x}	
			};
		if (0<#avûô>sfû_alsf{x}) define@1 1{(d;dir);av};
		};
	d
	}

right_arg{dir;x}:(0#ôÖf;(#f)Òx) Ý fûÂ÷@1 ('m.'½@1 Û 2Ù@1((f=' ')É@1Û0)÷@0 1 f)/fû÷@1 f Ý fûsys.agetdents{dir}

left_arg{y}:if (`sym=©0Øyûif (0<½y) 2Ùy else if (()½y) (_gsv{`cx};) else if (`sym=©y) (y;) else (_gsv{`cx};y)) y else ÷y

open_if{d}:
	{
	if (zû~dÅTABLES)
		{
		t.TABLES[,]ûd;
		(d%¡(~exists@0{d;RESERVED})/RESERVED)û<();
		dâ'_M:t.depth{`',(Îd),'} Ý t.TRIGGER';
		dâ'_D_:t.tree{`',(Îd),',`_D;0} Ý t.TRIGGER';
		dâ'_L_:t.dag{`',(Îd),',`_L;} Ý t.TRIGGER';
		dâ'_R_:t.dag{`',(Îd),',`_R;} Ý t.TRIGGER';
		dâ'_S_:t.top{`',(Îd),'} Ý t.TRIGGER';
		dâ'_V_:t.comp{`',(Îd),'} Ý ',(Îd),'._V';
		dâ'_L:t.linked{`',(Îd),';"_I_"}';
		dâ'_R:t.linked{`',(Îd),';"_J_"}';
		dâ'_T_:t.valid{`',(Îd),';_T;_U}';
		};
	z
	}

open_view_if{sd}:
	{
	(s;d)ûif (1=#sd) (sd%`_S;sd) else if (2=#sd) sd else (¢1Õsd;0#¢1Ùsd);
	if (()½s) Ù`source;
	(iû#tû,s) do if (open_if{i#t}) add_f{i#t;};
	if (open_if{d}) new_view{s;d;t} 
	else if (~s½ssûd%`_S)
		{
		(iû#ssû,ss) do (ss[i]%`_D)û(dd¨d)/ddûss[i]%`_D;
		new_view{s;d;t};
		};
	(s;d)
	}

new_view{s;d;t}:
	{
	(d%`_S)ûs;
	(iû#t) do (t[i]%`_D)[,]ûd;
	}

ãã ***	Define

let{d;f}:
	{
	open_if{d};
	add_f¡{d;f};
	trigger{};
	dÖf
	}

define{y;x}:
	{
	(d;dir)ûleft_arg{y};
	open_if{d};
	(f;xeq;sf)ûdefine_string{x};
	if (f=DOT) define_table{d;dir;`_T;xeq;sf} else add_f{d;f} Ý define_field{d;dir;f;xeq;sf};
	trigger{};
	dÖf
	}

define_table{d;dir;f;xeq;sf}:
	{
	define_attributes{d;f;sf};
	define_execute{d;f;`t.open;}
	}

define_field{d;dir;f;xeq;sf}:
	{
		if ('â'=1Ùxeq) 				(d%f)ûdâ1Õxeq
	else 	if (':'=1Ùxeq) 				dâ(Îf),xeq
	else 	if ('['=1Ùxeq) 				dâ(Îf),xeq
	else 	if (3>i Ý iû('¢1à';'¢2à';'¢3à')É<3Ùxeq) map{d,f;(-1+i;fs)} Ý fsûfile_string{dir;3Õxeq}
	else 	if ('à'=1#2Ùxeq) 			map{d,f;(â0#1Ùxeq;fs)} Ý fsûfile_string{dir;2Õxeq}
	else 						map{d,f;(0;fs)} Ý fsûfile_string{dir;xeq};
	
	define_attributes{d;f;sf};
	define_execute{d;f;`t.calendar;calendar};
	}

define_attributes{d;f;sf}:(iû#syms Ý (syms;vals)ûsf) do _set{d,f;(s;v)} Ý sûi#syms Ý vûiØvals

define_execute{d;f;s;func}:if (~()½v Ý vû_get{d,f;s}) _set{d,f;(s;if (()½func) âv else func{v})}

define_string{y}:
	{
	(f;y)û2Ùy;
	(xeq;sf)ûif (`box¨©y) (y;(;)) else (xeq;(<DOT¨0Øy)/¡y) Ý if (()½xeqûpick{DOT;y} Ý yû_alsf{y}) xeqûf;
	if (f=DOT) û(f;xeq;sf);
	if (`null=©xeq) xeqûf;
	if (`int=©xeq) xeqû(1Õîxeq),'à',Îf;
	if (`sym=©xeq) xeqû'0à',Îxeq;
	if ('à'=1Ùxeq) xeqû'0',xeq;
	(f;xeq;sf)
	}

file_string{d;f}:
	{
	fû(~fÅ'"''')/f;
	if (0=#d) dû'' else if (('/'=¢1Ùd)^'/'=1Ùf) dû¢1Õd else if (('/'¨¢1Ùd)^'/'¨1Ùf) d[,]û'/';
	if (~'.'Åf) fûf,'.m';
	d,f
	}

ãã ***	Close

close{d;fs}:
	{
	if (~dÅTABLES) û();
	zûclose_recursive{d;fs};
	_wa `coalesce;
	trigger{};
	z
	}

close_recursive{d;fs}:
	{
	if (allûfs½()) fsûd%`_T;
	if (~all) _ex{d,`_N} Ý if (bound_var{d,`_N}) s.free{d,`_N};
	if (all^bound{d}) s.free{d,`_T_};
	close_links¡{<(d;gs);lts,rts} Ý (lts;rts)ûd%¡`_L`_R Ý gsûdÖfs;
	if (all) if (0<#pû,d%`_S) (iû#p) do (p[i]%`_D)û(c¨d)/cûp[i]%`_D;
	eûôunique{Ö(Ø_alldep¡{e}),eûgs,if (all) dÖRESERVED};
	zûif (vwû0<#c Ý cûd%`_D) if (all) Ø&¡{c;<()} 
	else z Ý (iû#c Ý zû()) do if (1Åb Ý bûk[0]=i#c Ý kûe,@1 ôÖ(tÅe[0]Öe[1])/u Ý (t;u)ûsent{i#c}) zûz,&{i#c;b/k[1]};
	expunge¡{vw^~all;<@1(e[0]=d)/ôe};
	if (all) t.TABLESû(~TABLESÅd)/TABLES Ý _excxt{if (`½d) `. else d} else (d%`_T)û(~tÅ1#e)/t Ý tûd%`_T;
	if (~all) make_N{d};
	d,z
	}

close_links{x;b}:if (0<#vûØ_alldep¡{fs} Ý (a;fs)ûx) if (1Åuûb=0#ôÖv) drop_f{b;u/v} Ý _ex@0{u/v}

ãã ***	Reset

reset{}:
	{
	(iû#ts Ý tsûTABLES Ý zû()) do
		{
		if (bound{t} Ý tûi#ts) s.free{t,`_T_};
		_ex¡{tÖ_nl{t;`globs}};
		do _excxt{if (`½t) `. else t};
		if (~tÅ_nl{`;`cxs}) z[,]ût;
		};
	t.TABLESû();
	_wa{`coalesce};
	z
	}

ãã ***	Views

fix{d;b}:def_N{d} Ý trigger{} Ý if (~()½d%`_S) (d%`_F)ûif (b=1) d%`_V
fix_view{d;v}:if (()½fûd%`_F) v else if (v½()) f else (vÅf)/v

only{sd;e}:def_N{d} Ý trigger{} Ý (d%`_V)ûif (1=#sd Ý _undef{dÖ`_V} Ý (s;d)ûopen_view_if{sd}) only_select{d;e} else select{s;e}
select{s;e}:if (~n_e{e}) if (`int=©e) e else b/É#b Ý bûexp{s;e}
only_select{d;e}:fix_view{d;if (~n_e{e}) if (`int=©e Ý vûd%`_V) intersect{e;v} else if (()½v Ý bûexp{d;e}) b/É#b else b/v}

also{sd;e}:def_N{d} Ý trigger{} Ý (d%`_V)ûfix_view{d;if (~n_e{e} Ý _undef{dÖ`_V} Ý (s;d)ûopen_view_if{sd}) if (1=#sd) also_select{d;e} else also_int{d;select{s;e}}}
also_select{d;e}:if (`int=©e) also_int{d;e} else also_exp{d;e}
also_exp{d;e}:if (~()½vûd%`_V) v,(exp{d;e})/(d%`_V)ûd%`_V_
also_int{d;e}:if (~()½vûd%`_V) v,(~eÅv)/e

not{sd;e}:def_N{d} Ý trigger{} Ý (d%`_V)ûif (1=#sd Ý _undef{dÖ`_V} Ý (s;d)ûopen_view_if{sd}) only_select_not{d;e} else select_not{s;e}
select_not{s;e}:if (n_e{e}) É0 else if (`int¨©e) select{s;'~',e} else if (~()½vûs%`_V) (~vÅe)/v else (~vÅe)/v Ý vûÉs%`_N
only_select_not{d;e}:fix_view{d;if (n_e{e}) d%`_V_ else if (`int=©e) not_int{d;e} else not_exp{d;e}}
not_exp{d;e}:if (()½vûd%`_V Ý bû~exp{d;e}) b/É#b else b/v
not_int{d;e}:if (~()½vûd%`_V) (~vÅe)/v else (~vÅe)/v Ý vûÉd%`_N

sample{sd;n}:def_N{d} Ý trigger{} Ý (d%`_V)ûif (1=#sd Ý _undef{dÖ`_V} Ý (s;d)ûopen_view_if{sd}) only_select_sample{d;n} else select_sample{s;n}
only_select_sample{d;n}:fix_view{d;if (()½vûd%`_V) (if (()½n) k else n)?kûd%`_N else v[(if (()½n) k else n)?kû#v]}
select_sample{s;n}:(if (()½n) k else n)?kûs%`_N

sort{sd;vb}:def_N{d} Ý trigger{} Ý (d%`_V)ûif ((;)½2Ùvb Ý _undef{dÖ`_V} Ý (s;d)ûopen_view_if{sd}) un_sort{d} else if (1=#sd) only_select_sort{d;vb} else select_sort{s;vb}
un_sort{d}:if (~()½v Ý vûd%`_V) (èv)#v
only_select_sort{d;vb}:if (()½vûd%`_V Ý iûview_sort{d%¡k;b} Ý (k;b)ûsort_f{vb}) i else i#v
select_sort{s;vb}:view_sort{s%¡k;b} Ý (k;b)ûsort_f{vb}

always{sd;e}:
	{
	(s;d)ûopen_view_if{sd};
	if (n_e{e}) _undef{dÖ`_V} else dâ'_V:t.i_v{',e_e{s;e},'}';
	trigger{};
	def_N{d}
	}

sorted{sd;vb}:
	{
	(s;d)ûopen_view_if{sd};
	(v;b)ûsort_f{vb};
	dâ'_V:','t.view_sort{',(if (1<#s) ',<Ø'),',',c_v{s;v},';,',(1ÕØî¡b),'}';
	trigger{};
	def_N{d}
	}

ãã ***	Link

link_pointers{s;d}:
	{
	dâ'_L:t.linked{`',(Îd),';"_I_"} Ý t.TRIGGER';
	sâ'_R:t.linked{`',(Îs),';"_J_"} Ý t.TRIGGER';
	}

link{sd;fs}:
	{
	(s;d)ûsd;
	if (open_if{s}) add_f{s;};
	if (open_if{d}) add_f{d;};
	if (()½fs) un_link_{s;d} else link_{s;d;fs};
	link_pointers{s;d};
	trigger{};
	s,d
	}

un_link_{s;d}:Ý if (sÅd%`_L) _ex¡{dÖi,_alldep{i}} Ý iûdÖÂ'_I_',Îs
	
link_{s;d;fs}:
	{
	(sf;df)û,¡if (0<½fs) fs else (fs;fs);
	(i;j;k)û('_I_',Îs;'_J_',Îd;'_K_',Îd);
	dâi,':t.link_index{',c_v{s;sf},';',c_v{d;df},'}';
	sâj,':t.link_part{#',(ÎsÖ0#,sf),';',(ÎdÖÂi),'}';
	sâk,':t.first{#',(ÎdÖ0#,df),';',(ÎsÖÂj),'}';
	}

ãã ***	Link with precomputed r._H_l - nb: one field only

link_b{sd;fs}:
	{
	(s;d)ûsd;
	if (open_if{s}) add_f{s;};
	if (open_if{d}) add_f{d;};
	if (()½fs) un_link_b_{s;d} else link_b_{s;d;fs};
	link_pointers{s;d};
	trigger{};
	s,d
	}

unlink_b_{s;d}:Ý if (sÅd%`_L) _ex¡{_alldep{dÖÂ'_H_',Îs}}

link_b_{s;d;fs}:
	{
	(sf;df)û(<'')Ò¡if (0<½fs) fs else (fs;fs);
	if (1<#sf) Ù`domain;
	if (1<#df) Ù`domain;
	(h;i;g;j;k)û('_H_',Îs;'_I_',Îs;'_G_',Îd;'_J_',Îd;'_K_',Îd);
	(gg;hh;jj)ûÎ¡(s,d,s)Ö¡Â¡(g;h;j);
	sâg,':t.link_b_pr{',(ÎsÖsf),';',(ÎdÖdf),';',hh,'}';
	sâj,':t.link_b_part{',gg,';',hh,'}';
	dâi,':t.link_b_index{`',(Îs),';`',(Îd),';',jj,'}';
	sâk,':t.first{#',(ÎdÖdf),';',jj,'}';
	}

ãã ***	Break

group{sd;v}:
	{
	(s;d)ûopen_view_if{sd};
	_undef{dÖ`_V};
	(v;r)ûif (0=½v) (v;) else _alsf{v};
	(d%`_A)ûr;
	dâ'_J:',if (0=#v) ',<()' else 't.group_part{',c_v{s;v},';_A}';
	dâ'_K:',if (0=#v) (ÎsÖ`_N),' Ý _J' else 't.first{#',(ÎsÖ0#,v),';_J}';
	trigger{};
	def_N{d}
	}

breakûgroup

ãã ***	Static link

link_d{sd;fs}:link_static{sd;fs;direct_part}
link_i{sd;fs}:link_static{sd;fs;indirect_part}

link_static{sd;fs;func}:
	{
	(s;d)ûlink{sd;fs};
	(sf;df)û,¡if (0<½fs) fs else (fs;fs);
	func{d;s;d%¡df;s%¡sf;Â'_H_',Îs;Â'_J_',Îd;Â'_K_',Îd};
	}

ãã ***	Static group

group_d{sd;fs}:group_static{sd;fs;direct_part}
group_i{sd;fs}:group_static{sd;fs;indirect_part}

break_dûgroup_d
break_iûgroup_i

group_static{sd;fs;func}:
	{
	group{sd;fs};
	(s;d)ûsd;
	(sf;df)û,¡if (0<½fs) fs else (fs;fs);
	send_{sd;(sf;df)};
	func{s;d;s%¡sf;d%¡df;Â'_H_',Îd;`_J;`_K};
	_ex¡dÖdf;
	}

ãã ***	Simple partitioning for static link/group

indirect_part{s;d;a;b;h;j;k}:simple_part{d;(<%sÖh)#¡a;b;j;k} Ý (s%h)ûview_sort{a;(#a)Ù0}
direct_part{s;d;a;b;h;j;k}:simple_part{d;a;b;j;k} Ý _ex{sÖh}

simple_part{d;a;b;j;k}:
	{
	(d%k)ûlink_index{a;b} Ý _undef{dÖk} Ý d%k;
	(d%j)û>#¡d%j Ý _undef{dÖj} Ý d%j;
	d
	}

ãã ***	Catenate

cat{sd;junk}:
	{
	(s;d)ûopen_view_if{sd};
	_undef{dÖ`_V};
	trigger{};
	def_N{d}
	}

ãã ***	Report

report{sd;f}:
	{
	(s;d)ûopen_view_if{sd};
	mû0;
	define{s;(`_;':_NÒ',1Õîm)};
	slûddû,s;
	hû,if (0=½f) Û¡f else f;
	(iû1+#h) do
		{
		ssûdd;
		mûm+1;
		ddûÂif (i=#h) (Îs),'_' Ý ffû`_ else (Îs),Ø'_',¡Î¡ffûØ(-i)Õh;
		sl[,]ûdd;
		group{ss,dd;ff};
		send_{ss,dd;Øh};
		define{dd;(`_;':_NÒ',1Õîm)};
		};
	_undef{ddÖ`_K};
	(dd%`_K)[]û¢1;
	zûcat{sl,d;};
	send_{sl,d;`_,Øh};
	dâ'_V:t.merge{`',(Îs),';`',(Îdd),';`',(Îd),'}';
	_set{d,`_;(`t.report;h)};
	z
	}

ãã ***	slotfiller to related contexts

disperse{sd;v}:unique{_flat{z}} Ý zûproject¡{<sd,v;(<¡q),¡<¡r} Ý (q;r)û(0#sd)%v

project{sdv;qr}:
	{
	dâ(Îq),':`',(Îq),'Ø',ÎsÖv Ý (s;d;v)ûsdv Ý (q;r)ûqr;
	_scb{d,q;(t.inject_cb;)};
	if (0¨0Ødo _alsf{r}) d else disperse{d,Â(Îd),'_',Îq;q}
	}

inject_cb{s;d;i;p;c;v}:â'(',(if (0<#s) s else (1+tÉ':')Õt Ý tû_def{c,v}),')û`',(Îc),'%`',Îv

ãã ***  .T ûý table

loadDescribe{y;junk}:
	{
	(d;dir)ûleft_arg{y};
	if (~()½x Ý xûg_dot_T{dir}) dot_T_to_table{d;x}
	}

saveDescribe{y;junk}:
	{
	(d;dir)ûleft_arg{y};
	if (~()½z Ý zûtable_to_dot_T{d;dir}) s_dot_T{dir;z};
	}

table_to_dot_T{d;dir}:
	{
	varsûd%`_T;
	symsûd%`f0;
	sfû(syms;(#syms)Ò<(;));
	(iû¢1+#vars) do
		{
		kû(1+i)#vars;
		vûd%k;
		sû(dÖk) _get `title;
		mû(`null¨>©¡v)/É#v;
		(jû#m) do
			{
			sfjû(m[j]#syms)Øsf;
			sfjûsfj,¡(s;m[j]#v);
			((m[j]#syms)Øsf)ûsfj
			};
		};
	sf
	}

dot_T_to_table{d;x}:
	{
	(syms;sfs)û_alsf{x};
	tû,`t.fields;
	(d%`f0)ûsyms;
	(dÖ`f0) _set (`title;`t.fields);
	(dÖ`f0) _set (`respace;1);
	(iû#syms) do
		{
		(ss;vv)û_alsf{iØsfs};
		(jû#ss) do 
			{
			sûj#ss;
			vûjØvv;
			kûÂ'f',1ÕîtÉs;
			if (~sÅt)
				{
				(d%k)û(#syms)Ù();
				(dÖk) _set (`title;s);
				(dÖk) _set (`respace;1);
				t[,]ûs;
				};
			(d%k)[i]û<v;
			}
		};
	open{d;}
	}

ãã ***	Conditional initialization

init{}:if (~exists{`t;`TABLES}) t.TABLESû()

ã ***	Covers

view{s;d;f}:Ý send_{s,d;f} Ý only{s,d;}
relate{s;d;f;g;h}:Ý send_{d,s;h} Ý send_{s,d;g} Ý link{s,d;f}
partition{s;d;f;g}:Ý send_{s,d;g} Ý group{s,d;f}

ãã ***	Initialize on $load

init{}
